@page "/Admin/resetuserpassword"
@inject IUserService UserService
@inject IAdminService AdminService; 
@inject NavigationManager NavigationManager

@using System.Text
@using System.ComponentModel.DataAnnotations
@using FantasyFootball.Shared
@using FantasyFootball.Shared.Services

@rendermode InteractiveServer

<PageTitle>Admin Password Reset</PageTitle>

<h3 class="fw-bold">Admin Password Reset</h3>

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <div class="alert @(StatusMessage.StartsWith("✅") ? "alert-success" : "alert-danger")">
        @StatusMessage
    </div>
}

<div class="card shadow-sm p-4">
    <div class="form-floating mb-3">
        <select @bind="SelectedUserId" class="form-select">
            <option value="">Select a user</option>
            @foreach (var user in Users.OrderBy(x => x.UserName))
            {
                <option value="@user.UserId">@user.UserName (@user.UserTeamName)</option>
            }
        </select>
        <label>Select User</label>
    </div>

    <button class="w-100 btn btn-lg btn-primary" @onclick="GenerateResetLink">Generate Reset Link</button>
</div>

@if (!string.IsNullOrEmpty(ResetLink))
{
    <div class="mt-4 p-3 bg-light border rounded">
        <h5>Password Reset Link:</h5>
        <p class="text-break"><strong>@ResetLink</strong></p>
        <p class="text-muted">Copy and send this link to the user.</p>
    </div>
}

@code {
    private string? StatusMessage;
    private string? ResetLink;
    private string SelectedUserId = "";
    private List<UserModel> Users = new();

    protected override async Task OnInitializedAsync()
    {
        if (!await AdminService.EnsureAdminAccessAsync()) return;
        var user = await UserService.GetCurrentUserAsync();
        if (user == null || user.Admin != true) // Ensure only admins can access
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            var users = await AdminService.GetUserListViewModelAsync(); // Fetch all users for dropdown
            Users = users.Users;

        }
    }

    private async Task GenerateResetLink()
    {
        StatusMessage = "";
        ResetLink = null;

        if (string.IsNullOrWhiteSpace(SelectedUserId))
        {
            StatusMessage = "❌ Please select a user.";
            return;
        }

        var user = Users.FirstOrDefault(u => u.UserId == SelectedUserId);
        if (user == null)
        {
            StatusMessage = "❌ User not found.";
            return;
        }

        // Generate the password reset token
        var resetToken = await UserService.GeneratePasswordResetTokenAsync(user.Email);
        if (string.IsNullOrEmpty(resetToken))
        {
            StatusMessage = "❌ Failed to generate reset token.";
            return;
        }

        // Manually encode the token using Base64
        var encodedCode = Convert.ToBase64String(Encoding.UTF8.GetBytes(resetToken));

        ResetLink = $"{NavigationManager.BaseUri}UserResetPassword?code={encodedCode}&email={user.Email}";
        StatusMessage = "✅ Reset link generated successfully!";
        StateHasChanged();
    }
}
