@page "/myteam"
@inject IFootballDataService FootballDataService
@inject IUserService UserService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject ICommonDataService CommonDataService

@using FantasyFootball.Shared
@using FantasyFootball.Shared.Services
@using FantasyFootballBlazor.Client.Components

@rendermode InteractiveServer
<PageTitle>My Team</PageTitle>

@if (!string.IsNullOrWhiteSpace(Model?.AlertMessage))
{
    <div class="alert alert-warning text-center fw-bold shadow-sm">
        ⚠️ <strong>League Notice:</strong> @Model.AlertMessage
    </div>
}

<AuthorizeView>
    <Authorized>
        <div class="container mt-4">
            <div class="text-center mb-4">
                <h3 class="fw-bold"><i class="fas fa-users"></i>My Team</h3>
            </div>

            @if (Model == null)
            {
                <!-- 🔄 Loading Spinner -->
                <div class="text-center my-5">
                    <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3">Fetching your team...</p>
                </div>
            }
            else
            {
                <!-- Tie Breaker Section -->
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-indigo text-white text-center d-flex justify-content-center align-items-center">
                        <h5 class="mb-0 me-2">🏆 Tie Breaker Scores</h5>
                        <!-- Help Icon with Tooltip -->
                        <span title="Tie breaking scores are the total points scored between both teams. The difference between the two games is added up. The person with the closest guess wins the tie breaker.">
                            <i class="bi bi-question-circle fs-5"></i>
                        </span>
                    </div>

                    <div class="card-body">
                        <div class="row g-3">
                            <!-- Game 1 Tie Breaker -->
                            <div class="col-md-6">
                                <div class="input-group">
                                    <span class="input-group-text bg-light fw-bold">@Model.Game1ScoreLabel</span>
                                    @if (Model.Game1ScoreLocked)
                                    {
                                        <input type="text" class="form-control bg-light" value="@Model.Game1Score (@Model.Game1ActualScore)" disabled>
                                    }
                                    else
                                    {
                                        <input type="number" class="form-control"
                                        placeholder="Enter Score"
                                        @bind="Model.Game1Score"
                                        @bind:event="onchange"
                                        @bind:after="() => SaveTieBreakerScore(Model.ScheduleIdGame1, Model.Game1Score)">
                                    }
                                </div>
                            </div>

                            <!-- Game 2 Tie Breaker -->
                            <div class="col-md-6">
                                <div class="input-group">
                                    <span class="input-group-text bg-light fw-bold">@Model.Game2ScoreLabel</span>
                                    @if (Model.Game2ScoreLocked)
                                    {
                                        <input type="text" class="form-control bg-light" value="@Model.Game2Score (@Model.Game2ActualScore)" disabled>
                                    }
                                    else
                                    {
                                        <input type="number" class="form-control"
                                        placeholder="Enter Score"
                                        @bind="Model.Game2Score"
                                        @bind:event="onchange"
                                        @bind:after="() => SaveTieBreakerScore(Model.ScheduleIdGame2, Model.Game2Score)">
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- ✅ Save Confirmation -->
                        @if (ShowSaveMessage)
                        {
                            <p class="text-success mt-2 text-center fw-bold">@SaveMessage</p>
                        }
                    </div>
                </div>

                <!-- Tabs for Weekly & Survivor Picks -->
                <div class="row mb-3 align-items-center">
                    <div class="col-12">
                        <ul class="nav nav-tabs w-100 d-flex">
                            <!-- Weekly Tab -->
                            <li class="nav-item flex-fill">
                                <button class="nav-link fw-bold w-100 @(ActiveTab == "weekly" ? "active bg-purple text-white" : "inactive-tab")"
                                        @onclick='() => SetActiveTab("weekly")'>
                                    🏈 Weekly Picks <span class="badge bg-danger">@Model.WeeklyPicksLeft</span>
                                </button>
                            </li>

                            <!-- Survivor Tab -->
                            <li class="nav-item flex-fill">
                                <button class="nav-link fw-bold w-100 @(ActiveTab == "survivor" ? "active bg-purple text-white" : "inactive-tab")"
                                        @onclick='() => SetActiveTab("survivor")'>
                                    💀 Survivor Picks <span class="badge bg-danger">@Model.SurvivorPicksLeft</span>
                                </button>
                            </li>

                            <!-- Week Dropdown Tab -->
                            <li class="nav-item flex-fill">
                                <div class="nav-link fw-bold w-100 inactive-tab week-dropdown-wrapper">
                                    <select class="week-dropdown-select"
                                            @bind-value="SelectedWeek" @bind-value:event="onchange">
                                        @foreach (var option in WeekOptions)
                                        {
                                            <option value="@option.Value">@option.Text</option>
                                        }
                                    </select>
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>


                <!-- Tab Content -->
                @if (ActiveTab == "weekly")
                {
                    <PlayerPicks Title="🏆 Weekly Picks"
                    GameTypeId="1"
                    Players="@WeeklyPlayers" />
                }
                @if (ActiveTab == "survivor" && Model.Survivor)
                {
                    <PlayerPicks Title="💀 Survivor Picks"
                    GameTypeId="2"
                    Players="@SurvivorPlayers" />
                }
            }
        </div>
    </Authorized>

    <NotAuthorized>
        <div class="container mt-4">
            <div class="alert alert-danger text-center">
                ❌ You are not authorized to view this page.
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _loaded = false;
    private MyTeamViewModel? Model;
    private string ActiveTab = "weekly";
    private bool ShowSaveMessage = false;
    private string SaveMessage = "";
    private int _selectedWeek;

    private int CurrentWeek;
    private int SelectedWeek
    {
        get => _selectedWeek;
        set
        {
            if (_selectedWeek != value)
            {
                _selectedWeek = value;
                _ = LoadTeam(); // Triggers model reload on dropdown change
                StateHasChanged();
            }
        }
    }

    private List<DropdownModel> WeekOptions = new();

    // 🧠 Called after first render
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_loaded)
        {
            _loaded = true;
            await InitializeWeeks();
            await LoadTeam();
            
        }
    }

    // 📅 Initialize week dropdown and current week
    private async Task InitializeWeeks()
    {
        // 🧠 Get the current week
        int fetchedWeek = await CommonDataService.GetCurrentWeekAsync();

        // 🚫 Treat Week 19 as Week 18
        CurrentWeek = fetchedWeek >= 19 ? 18 : fetchedWeek;

        // ✅ Default selected week to current
        SelectedWeek = CurrentWeek;

        // 📅 Limit the dropdown to Week 1 through Week 18 (Week 19 is excluded intentionally)
        int maxWeek = Math.Min(CurrentWeek + 1, 18); // Cap at 18 to exclude Week 19

        WeekOptions = Enumerable.Range(1, maxWeek)
                                .Select(w => new DropdownModel { Text = $"Week {w}", Value = w.ToString() })
                                .Reverse()
                                .ToList();
    }

    // 📦 Load team for selected week
    private async Task LoadTeam()
    {
        try
        {
            int year = await CommonDataService.GetCurrentYearAsync();

            var user = await UserService.GetCurrentUserAsync();
            if (user == null)
            {
                NavigationManager.NavigateTo("/Account/Login", forceLoad: true);
                return;
            }

            if (user.Paid != true)
            {
                NavigationManager.NavigateTo("/payment", forceLoad: true);
                return;
            }

            Model = await FootballDataService.GetMyTeamViewModelAsync(user.UserId, SelectedWeek, year, CurrentWeek);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading My Team: {ex.Message}");
        }
        StateHasChanged();
    }

    // 💾 Save tie breaker guess
    private async Task SaveTieBreakerScore(int scheduleId, int? score)
    {
        if (Model == null || score == null) return;
        var userId = await UserService.GetUserIdAsync();

        SaveMessage = "Saving...";
        ShowSaveMessage = true;
        StateHasChanged();

        var success = await FootballDataService.SaveTieBreakerScoreAsync(userId, scheduleId, score.Value);

        SaveMessage = success ? "✅ Score Saved!" : "❌ Failed to Save!";
        await Task.Delay(1500);
        ShowSaveMessage = false;

        StateHasChanged();
    }

    // 🔄 Switch tab
    private void SetActiveTab(string tab)
    {
        ActiveTab = tab;
        StateHasChanged();
    }

    // 🧠 Grouped weekly player data
    private List<PlayerModel> WeeklyPlayers => new()
    {
        Model.QuarterBack, Model.RunningBack, Model.WideReceiver,
        Model.TightEnd, Model.Kicker, Model.Defense
    };

    // 🧠 Grouped survivor player data
    private List<PlayerModel> SurvivorPlayers => new()
    {
        Model.SurvivorQuarterBack, Model.SurvivorRunningBack, Model.SurvivorWideReceiver,
        Model.SurvivorTightEnd, Model.SurvivorKicker, Model.SurvivorDefense
    };
}
