@page "/UserResetPassword"
@inject IUserService UserService
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using System.ComponentModel.DataAnnotations
@using FantasyFootball.Shared
@using FantasyFootball.Shared.Services

@rendermode InteractiveServer

<PageTitle>Reset User Password</PageTitle>

<h3 class="fw-bold">Reset Password</h3>

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <div class="alert @(StatusMessage.StartsWith("✅") ? "alert-success" : "alert-danger")">
        @StatusMessage
    </div>
}

<div class="card shadow-sm p-4">
    <!-- Username Field (for autofill) -->
    <div class="form-floating mb-3">
        <input @bind="Input.UserName" type="text" class="form-control" placeholder="Enter your username" autocomplete="username" disabled />
        <label>Username</label>
    </div>

    <div class="form-floating mb-3">
        <input @bind="Input.Email" type="text" class="form-control" placeholder="Enter your email" disabled />
        <label>Email</label>
    </div>

    <div class="form-floating mb-3">
        <input @bind="Input.Password" type="password" class="form-control" placeholder="Enter new password" autocomplete="current-password" />
        <label>New Password</label>
    </div>

    <div class="form-floating mb-3">
        <input @bind="Input.ConfirmPassword" type="password" class="form-control" placeholder="Confirm new password" autocomplete="new-password" />
        <label>Confirm Password</label>
    </div>

    <button class="w-100 btn btn-lg btn-primary" @onclick="Reset">Reset Password</button>
</div>

@code {
    private bool _loaded = false;
    private string? StatusMessage;
    private ResetPasswordModel Input = new();
    private string? Code;
    private string? Email;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_loaded)
        {
            _loaded = true;

            var uri = new Uri(NavigationManager.Uri);
            var queryParams = QueryHelpers.ParseQuery(uri.Query);

            if (!queryParams.TryGetValue("code", out var code) || !queryParams.TryGetValue("email", out var email))
            {
                StatusMessage = "❌ Invalid password reset request.";
                StateHasChanged();
                return;
            }

            try
            {
                Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(code));
                Email = email;
                Input.Email = Email;

                await FetchUserInfo(Email);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"❌ Error decoding reset token: {ex.Message}");
                StatusMessage = "❌ Invalid or expired password reset token.";
            }

            StateHasChanged();
        }
    }

    private async Task FetchUserInfo(string email)
    {
        var user = await UserService.GetUserByEmailAsync(email);
        if (user != null)
        {
            Input.UserName = user.UserName;
            Input.Email = user.Email;
        }
    }

    private async Task Reset()
    {
        StatusMessage = "";

        if (string.IsNullOrWhiteSpace(Input.Email) ||
            string.IsNullOrWhiteSpace(Input.Password) ||
            string.IsNullOrWhiteSpace(Input.ConfirmPassword))
        {
            StatusMessage = "❌ All fields are required.";
            return;
        }

        if (Input.Password != Input.ConfirmPassword)
        {
            StatusMessage = "❌ Passwords do not match.";
            return;
        }

        var user = await UserService.GetUserByEmailAsync(Input.Email);
        if (user == null)
        {
            StatusMessage = "❌ No user found with this email.";
            return;
        }

        var result = await UserService.ResetPasswordAsync(user.Email, Code, Input.Password);
        StatusMessage = result ? "✅ Password reset successful!" : "❌ Password reset failed. Please try again.";
        StateHasChanged();
    }

    private class ResetPasswordModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        public string UserName { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "Password must be between {2} and {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}