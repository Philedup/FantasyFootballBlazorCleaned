@page "/Account/Register"
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FantasyFootballBlazor.Data

@rendermode InteractiveServer

<h3 class="fw-bold">Register</h3>

@if (!string.IsNullOrEmpty(StatusMessage))
{
        <div class="alert @(StatusMessage.StartsWith("✅") ? "alert-success" : "alert-danger")">
        @StatusMessage
        </div>
}

<div class="card shadow-sm p-4">
    <EditForm Model="Input" OnValidSubmit="RegisterUser">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <!-- Username -->
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.UserName" class="form-control" autocomplete="username" placeholder="Enter username" />
            <label>Username</label>
            <ValidationMessage For="() => Input.UserName" class="text-danger" />
        </div>

        <!-- Team Name -->
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.UserTeamName" class="form-control" autocomplete="off" placeholder="Enter team name" />
            <label>Team Name</label>
            <ValidationMessage For="() => Input.UserTeamName" class="text-danger" />
        </div>

        <!-- Email -->
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="email" placeholder="name@example.com" />
            <label>Email</label>
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </div>

        <!-- PayPal/Venmo -->
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.PaypalEmail" class="form-control" autocomplete="off" placeholder="Enter PayPal or Venmo" />
            <label>PayPal Email / Venmo (Used for payouts)</label>
            <ValidationMessage For="() => Input.PaypalEmail" class="text-danger" />
        </div>

        <!-- Password -->
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" placeholder="Enter password" />
            <label>Password</label>
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>

        <!-- Confirm Password -->
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="Confirm password" />
            <label>Confirm Password</label>
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
        </div>

        <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
    </EditForm>
</div>

@code {
    private string? StatusMessage;
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    /// <summary>
    /// Handles user registration and account creation.
    /// </summary>
    private async Task RegisterUser()
    {
        var user = CreateUser();

        // Set user properties
        await UserStore.SetUserNameAsync(user, Input.UserName, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        user.UserTeamName = Input.UserTeamName;
        user.PaypalEmail = Input.PaypalEmail;

        // Create the user
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        // Email Confirmation Process
        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            "Account/ConfirmEmail",
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        // await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));
        // if (UserManager.Options.SignIn.RequireConfirmedAccount)
        // {
        //     RedirectManager.RedirectTo("/myteam");
        // }

        // Sign in the user
        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo("/myteam");
    }

    /// <summary>
    /// Creates a new ApplicationUser instance.
    /// </summary>
    /// <returns>A new ApplicationUser object.</returns>
    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>()!;
        }
        catch
        {
            throw new InvalidOperationException($"Cannot create an instance of '{nameof(ApplicationUser)}'. Ensure it has a parameterless constructor.");
        }
    }

    /// <summary>
    /// Retrieves the email store for the user manager.
    /// </summary>
    /// <returns>The IUserEmailStore instance.</returns>
    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    /// <summary>
    /// Input model for the registration form.
    /// </summary>
    private sealed class InputModel
    {
        [Required]
        [StringLength(50, ErrorMessage = "Username must be between {2} and {1} characters long.", MinimumLength = 3)]
        public string UserName { get; set; } = "";

        [Required]
        [StringLength(50, ErrorMessage = "Team Name must be between {2} and {1} characters long.", MinimumLength = 3)]
        public string UserTeamName { get; set; } = "";

        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        public string PaypalEmail { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "Password must be between {2} and {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
