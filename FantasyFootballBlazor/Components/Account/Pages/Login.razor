@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using FantasyFootballBlazor.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<h3 class="fw-bold">Log in</h3>

<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />

            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />

                <hr />
                <ValidationSummary class="text-danger" role="alert" />

                <!-- Username -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.UserName" class="form-control"
                               autocomplete="username" aria-required="true" placeholder="Enter username" />
                    <label for="email" class="form-label">User Name</label>
                    <ValidationMessage For="() => Input.UserName" class="text-danger" />
                </div>

                <!-- Password -->
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control"
                               autocomplete="current-password" aria-required="true" placeholder="Enter password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <!-- Remember Me -->
                <div class="form-check mb-3">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                    <label class="form-check-label">Remember me</label>
                </div>

                <!-- Submit Button -->
                <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>

                <!-- Links -->
                <div class="mt-3 text-center">
                    <p><a href="Account/ForgotPassword">Forgot your password?</a></p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register",
                        new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                            Register as a new user
                        </a>
                    </p>
                    @* <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p> *@
                </div>
            </EditForm>
        </section>
    </div>
</div>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo("/myteam");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string UserName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
